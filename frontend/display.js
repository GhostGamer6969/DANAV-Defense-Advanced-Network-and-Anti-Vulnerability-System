
// Initialize Web3
let web3;

// Check if MetaMask is installed
if (typeof window.ethereum !== 'undefined') {
    // Use MetaMask provider
    web3 = new Web3(window.ethereum);

    // Request account access if needed
    window.ethereum.request({ method: 'eth_requestAccounts' })
        .then(accounts => {
            // Accounts now exposed
            console.log('Connected with MetaMask:', accounts[0]);
        })
        .catch(error => {
            console.error('MetaMask account access denied:', error);
        });
} else {
    console.error('MetaMask is not installed');
}

// Replace YOUR_CONTRACT_ADDRESS with your actual contract address
const contractAddress = '0xC71d9Cd0A04af9fe6B7d644D21146FaA8c81ced3';

// Replace with your contract ABI
const contractABI = [
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "_equipmentType",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "_model",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "_serialNumber",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "_manufacturer",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "_specifications",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "_maintenanceHistory",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "_status",
				"type": "string"
			}
		],
		"name": "addEquipment",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "bytes32",
				"name": "defenseMinisterKey",
				"type": "bytes32"
			},
			{
				"internalType": "bytes32",
				"name": "armyCommissarKey",
				"type": "bytes32"
			},
			{
				"internalType": "bytes32",
				"name": "navyHeadKey",
				"type": "bytes32"
			},
			{
				"internalType": "bytes32",
				"name": "airForceHeadKey",
				"type": "bytes32"
			},
			{
				"internalType": "string",
				"name": "newGeneralName",
				"type": "string"
			}
		],
		"name": "createEncryptionKeys",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "uint256",
				"name": "id",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "string",
				"name": "equipmentType",
				"type": "string"
			},
			{
				"indexed": false,
				"internalType": "string",
				"name": "model",
				"type": "string"
			}
		],
		"name": "EquipmentAdded",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"internalType": "string",
				"name": "masterPassword",
				"type": "string"
			}
		],
		"name": "MasterPasswordGenerated",
		"type": "event"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "id",
				"type": "uint256"
			},
			{
				"internalType": "string",
				"name": "_equipmentType",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "_model",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "_serialNumber",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "_manufacturer",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "_specifications",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "_maintenanceHistory",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "_status",
				"type": "string"
			}
		],
		"name": "updateEquipment",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "easyToRememberKey",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "encryptionKey",
		"outputs": [
			{
				"internalType": "bytes32",
				"name": "",
				"type": "bytes32"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "equipmentCount",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"name": "equipmentList",
		"outputs": [
			{
				"internalType": "string",
				"name": "equipmentType",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "model",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "serialNumber",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "manufacturer",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "specifications",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "maintenanceHistory",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "status",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "id",
				"type": "uint256"
			}
		],
		"name": "getEquipment",
		"outputs": [
			{
				"internalType": "string",
				"name": "equipmentType",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "model",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "serialNumber",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "manufacturer",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "specifications",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "maintenanceHistory",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "status",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "masterPassword",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	}
];

// Create an instance of the contract
const contract = new web3.eth.Contract(contractABI, contractAddress);

// Function to fetch equipment data from the smart contract and update the HTML
async function displayEquipmentData() {
    try {
        const equipmentCount = await contract.methods.equipmentCount().call();
        const weaponsContainer = document.querySelector('.weapons');

        // Clear existing content
        weaponsContainer.innerHTML = '';

        // Loop through each equipment and display it
        for (let i = 0; i < equipmentCount; i++) {
            const equipment = await contract.methods.getEquipment(i).call();
            const weaponType = equipment[0];
            const model = equipment[1];
            const serialNumber = equipment[2];
            const manufacturer = equipment[3];
            const specifications = equipment[4];
            const maintenanceHistory = equipment[5];
            const status = equipment[6];

            // Create HTML elements to display equipment data
            const weaponDiv = document.createElement('div');
            weaponDiv.classList.add('weapon');

            const weaponTypeHeading = document.createElement('h3');
            weaponTypeHeading.textContent = `Weapon Type: ${weaponType}`;

            const modelParagraph = document.createElement('p');
            modelParagraph.textContent = `Model: ${model}`;

            const serialNumberParagraph = document.createElement('p');
            serialNumberParagraph.textContent = `Serial Number: ${serialNumber}`;

            const manufacturerParagraph = document.createElement('p');
            manufacturerParagraph.textContent = `Manufacturer: ${manufacturer}`;

            const specificationsParagraph = document.createElement('p');
            specificationsParagraph.textContent = `Specifications: ${specifications}`;

            const maintenanceHistoryParagraph = document.createElement('p');
            maintenanceHistoryParagraph.textContent = `Maintenance History: ${maintenanceHistory}`;

            const statusParagraph = document.createElement('p');
            statusParagraph.textContent = `Status: ${status}`;

            // Append elements to the weapon div
            weaponDiv.appendChild(weaponTypeHeading);
            weaponDiv.appendChild(modelParagraph);
            weaponDiv.appendChild(serialNumberParagraph);
            weaponDiv.appendChild(manufacturerParagraph);
            weaponDiv.appendChild(specificationsParagraph);
            weaponDiv.appendChild(maintenanceHistoryParagraph);
            weaponDiv.appendChild(statusParagraph);

            // Append weapon div to the weapons container
            weaponsContainer.appendChild(weaponDiv);
        }
    } catch (error) {
        console.error('Error displaying equipment data:', error);
        alert('An error occurred while fetching equipment data. Please try again.');
    }
}

// Call the function to display equipment data
displayEquipmentData();