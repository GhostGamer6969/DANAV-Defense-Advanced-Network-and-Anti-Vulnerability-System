// Prevent default form submission behavior
document.getElementById('weaponForm').addEventListener('submit', function(event) {
    event.preventDefault();
    // Call your addEquipment function here
});


async function connectMetaMask() {
	// Check if MetaMask is installed
	if (typeof window.ethereum !== 'undefined') {
		try {
			// Request account access
			await window.ethereum.request({ method: 'eth_requestAccounts' });
			// Initialize Web3.js with MetaMask's provider
			window.web3 = new Web3(window.ethereum);
			console.log('MetaMask is connected');
		} catch (error) {
			console.error('Error connecting to MetaMask:', error);
		}
	} else {
		console.error('MetaMask is not installed');
	}
}

// Call the function to connect MetaMask when the page loads
connectMetaMask();

// Initialize Web3.js
const web3 = new Web3(Web3.givenProvider || 'http://localhost:8545'); // Use provided web3 provider or connect to local node

// Specify the address of your deployed smart contract
const contractAddress = '0xC71d9Cd0A04af9fe6B7d644D21146FaA8c81ced3';

// Define the ABI (Application Binary Interface) of your smart contract
const abi = [
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "_equipmentType",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "_model",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "_serialNumber",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "_manufacturer",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "_specifications",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "_maintenanceHistory",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "_status",
				"type": "string"
			}
		],
		"name": "addEquipment",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "bytes32",
				"name": "defenseMinisterKey",
				"type": "bytes32"
			},
			{
				"internalType": "bytes32",
				"name": "armyCommissarKey",
				"type": "bytes32"
			},
			{
				"internalType": "bytes32",
				"name": "navyHeadKey",
				"type": "bytes32"
			},
			{
				"internalType": "bytes32",
				"name": "airForceHeadKey",
				"type": "bytes32"
			},
			{
				"internalType": "string",
				"name": "newGeneralName",
				"type": "string"
			}
		],
		"name": "createEncryptionKeys",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "uint256",
				"name": "id",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "string",
				"name": "equipmentType",
				"type": "string"
			},
			{
				"indexed": false,
				"internalType": "string",
				"name": "model",
				"type": "string"
			}
		],
		"name": "EquipmentAdded",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"internalType": "string",
				"name": "masterPassword",
				"type": "string"
			}
		],
		"name": "MasterPasswordGenerated",
		"type": "event"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "id",
				"type": "uint256"
			},
			{
				"internalType": "string",
				"name": "_equipmentType",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "_model",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "_serialNumber",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "_manufacturer",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "_specifications",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "_maintenanceHistory",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "_status",
				"type": "string"
			}
		],
		"name": "updateEquipment",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "easyToRememberKey",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "encryptionKey",
		"outputs": [
			{
				"internalType": "bytes32",
				"name": "",
				"type": "bytes32"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "equipmentCount",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"name": "equipmentList",
		"outputs": [
			{
				"internalType": "string",
				"name": "equipmentType",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "model",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "serialNumber",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "manufacturer",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "specifications",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "maintenanceHistory",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "status",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "id",
				"type": "uint256"
			}
		],
		"name": "getEquipment",
		"outputs": [
			{
				"internalType": "string",
				"name": "equipmentType",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "model",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "serialNumber",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "manufacturer",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "specifications",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "maintenanceHistory",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "status",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "masterPassword",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	}
];

// Instantiate the smart contract
const contract = new web3.eth.Contract(abi, contractAddress);

// Function to add a new weapon
async function addEquipment(equipmentType, model, serialNumber, manufacturer, specification, lastMaintenanceDate, nextMaintenanceDate) {
    try {
        // Call the 'addWeapon' function of the smart contract
        const result = await contract.methods.addEquipment(equipmentType, model, serialNumber, manufacturer, specification, lastMaintenanceDate, nextMaintenanceDate).send({from: '0x28dd92747c1f572c4b7B21D686D9b17c0d2956Db'});
        console.log('Transaction Hash:', result.transactionHash);
        alert('Weapon added successfully!');
    } catch (error) {
        console.error('Error adding weapon:', error);
        alert('Failed to add weapon. Please check the console for error details.');
    }
}

// Example usage:
